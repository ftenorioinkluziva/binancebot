// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  apiKeys       ApiKey[]
  strategies    Strategy[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  exchange    String   @default("binance")
  apiKey      String
  apiSecret   String
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Strategy {
  id          String   @id @default(cuid())
  userId      String
  name        String
  type        String   // DCA, BollingerBands, MovingAverage, etc.
  config      Json
  active      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastRun     DateTime?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades      Trade[]
}

model Trade {
  id          String   @id @default(cuid())
  strategyId  String?
  userId      String
  symbol      String
  side        String   // BUY, SELL
  quantity    Float
  price       Float
  total       Float
  status      String   // PENDING, FILLED, CANCELED, REJECTED
  orderId     String?
  orderType   String   // MARKET, LIMIT, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  strategy    Strategy? @relation(fields: [strategyId], references: [id])
}