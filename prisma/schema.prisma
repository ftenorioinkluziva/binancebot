// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relações
  apiKeys       ApiKey[]
  strategies    Strategy[]
  accounts      Account[]
  sessions      Session[]
  tradingPairs  TradingPair[]
  orders        Order[]
  executions    Execution[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  exchange    String   @default("binance")
  apiKey      String
  apiSecret   String
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Strategy {
  id          String   @id @default(cuid())
  userId      String
  name        String
  symbol      String
  type        String   // DCA, BollingerBands, MovingAverage
  active      Boolean  @default(false)
  config      Json     // Configurações específicas da estratégia
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastRun     DateTime?
  performance Float?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relações
  orders          Order[]
}

model TradingPair {
  id        String   @id @default(cuid())
  userId    String
  symbol    String   // Ex: BTCUSDT
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  strategyId    String?
  symbol        String
  binanceOrderId String     // ID original da ordem na Binance
  clientOrderId String?
  side          String      // BUY, SELL
  type          String      // LIMIT, MARKET, etc.
  status        String      // NEW, FILLED, CANCELED, etc.
  price         Float?      // Preço limite (se aplicável)
  quantity      Float       // Quantidade desejada
  executedQty   Float?      // Quantidade realmente executada
  quoteQty      Float?      // Valor total em moeda de cotação
  timeInForce   String?     // GTC, IOC, FOK
  stopPrice     Float?
  timestamp     DateTime?   // Momento da criação na Binance
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relacionamentos
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy      Strategy?   @relation(fields: [strategyId], references: [id])
  executions    Execution[] // Nova relação com execuções
  
  // Índices
  @@index([userId])
  @@index([symbol])
  @@index([binanceOrderId])
  @@unique([userId, binanceOrderId])
}

model Execution {
  id              String    @id @default(cuid())
  orderId         String    // Referência para Order
  userId          String
  binanceTradeId  String    // ID do trade na Binance
  symbol          String
  side            String    // BUY, SELL
  price           Float     // Preço da execução
  quantity        Float     // Quantidade executada
  commission      Float?    // Taxa paga
  commissionAsset String?   // Ativo em que a taxa foi paga
  isMaker         Boolean?  // Se foi executado como maker
  timestamp       DateTime? // Momento da execução na Binance
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relacionamentos
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  order           Order     @relation(fields: [orderId], references: [id])
  
  // Índices
  @@index([userId])
  @@index([symbol])
  @@unique([userId, binanceTradeId])
}